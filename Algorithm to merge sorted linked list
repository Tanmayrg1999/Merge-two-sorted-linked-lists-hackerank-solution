SinglyLinkedListNode* mergeLists(SinglyLinkedListNode* head1, SinglyLinkedListNode* head2) 
{
	SinglyLinkedListNode* p=head1;
	SinglyLinkedListNode* q=head2;
	SinglyLinkedListNode* head=NULL;
	while(p!=NULL && q!=NULL)
	{
    	SinglyLinkedListNode* newnode=(struct SinglyLinkedListNode*)malloc(sizeof(SinglyLinkedListNode*));
    	if(p->data<=q->data)
    	{
        	if(head==NULL)
        	{
            	newnode->data=p->data;
            	head=newnode;
            	newnode->next=NULL;
        	}
        	else
        	{
            	SinglyLinkedListNode *a=head;
            	while(a->next!=NULL)
            	{
                	a=a->next;
            	}
            a->next=newnode;
            newnode->data=p->data;
            newnode->next=NULL;
        }
        p=p->next;
    }
    	else
    	{
        	 if(head==NULL)
        	{
            	newnode->data=q->data;
            	head=newnode;
            	newnode->next=NULL;
        	}
        	else
        	{
            	SinglyLinkedListNode *b=head;
            	while(b->next!=NULL)
            	{
                	b=b->next;
            	}
            	b->next=newnode;
            	newnode->data=q->data;
            	newnode->next=NULL;
        	}
        q=q->next;
    }
}
while(p!=NULL )
{
    SinglyLinkedListNode* c=head;
    while(c->next!=NULL)
    {
        c=c->next;
    }
	SinglyLinkedListNode* newnode=(struct SinglyLinkedListNode*)malloc(sizeof(SinglyLinkedListNode*));
	c->next=newnode;
	newnode->next=NULL;
	newnode->data=p->data;
	p=p->next;
}
while(q!=NULL )
{
    SinglyLinkedListNode* d=head;
    while(d->next!=NULL)
    {
        d=d->next;
    }
	SinglyLinkedListNode* newnode=(struct SinglyLinkedListNode*)malloc(sizeof(SinglyLinkedListNode*));
	d->next=newnode;
	newnode->next=NULL;
	newnode->data=q->data;
	q=q->next;
}
	return head;
}
